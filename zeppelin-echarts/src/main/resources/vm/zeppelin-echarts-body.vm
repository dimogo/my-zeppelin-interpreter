<div id="z-e-paragraph-$ZeppelinEChartsParagraphId" class="container-fluid z-e-example">
    <div id="z-e-console">
        <div class="form-group row">
            <label for="inputEmail3" class="col-sm-1 control-label">主标题</label>

            <div class="col-sm-5">
            <input type="text" class="form-control" id="z-e-title" placeholder="图表的主标题"
                #if ($ZeppelinEchartsTitle) value=$ZeppelinEchartsTitile" #else value="" #end >
            </div>
            <label for="inputEmail3" class="col-sm-1 control-label">副标题</label>

            <div class="col-sm-5">
                <input type="text" class="form-control" id="z-e-subtitle" placeholder="图表的副标题"
                #if ($ZeppelinEchartsSubTitle) "$ZeppelinEchartsSubTitle" #else "" #end >
            </div>
        </div>
        <div class="form-group row">
            <label for="inputEmail3" class="col-sm-1 control-label">系列</label>

            <div class="col-sm-2">
                <input type="text" class="form-control" id="z-e-serie-name" placeholder="图表系列名称">
            </div>
            <label for="inputEmail3" class="col-sm-1 control-label">图表</label>

            <div class="col-sm-2">
                <select id="z-e-type" class="form-control">
                    <option value="" selected></option>
                    <option value="pie">饼图</option>
                    <option value="bar">柱状图</option>
                    <option value="line">折线图</option>
                    <option value="scatter">散点图</option>
                    <option value="radar">雷达图</option>
                </select>
            </div>
            <label for="inputEmail3" class="col-sm-1 control-label">宽度</label>

            <div class="col-sm-2">
                <input type="text" class="form-control" id="z-e-graphic-width" placeholder="图表的宽度"
                    #if($ZeppelinECahrtsWidth) value="$ZeppelinECahrtsWidth" #end>
            </div>
            <label for="inputEmail3" class="col-sm-1 control-label">高度</label>

            <div class="col-sm-2">
                <input type="text" class="form-control" id="z-e-graphic-height" placeholder="图表的高度"
                    #if($ZeppelinECahrtsHeight) value="$ZeppelinECahrtsHeight" #end>
            </div>
        </div>
        <div class="form-group row">
            <label for="inputEmail3" class="col-sm-1 control-label">x序号</label>

            <div class="col-sm-2">
                <select id="z-e-xaxis" class="form-control">
                </select>
            </div>
            <label for="inputEmail3" class="col-sm-1 control-label">x类型</label>

            <div class="col-sm-2">
                <select id="z-e-xaxis-type" class="form-control">
                    <option value="value">数值</option>
                    <option value="category" selected>类目</option>
                    <option value="time">时间</option>
                    <option value="log">对数</option>
                </select>
            </div>
            <label for="inputEmail3" class="col-sm-1 control-label">y序号</label>

            <div class="col-sm-2">
                <select id="z-e-yaxis" class="form-control">
                </select>
            </div>
            <label for="inputEmail3" class="col-sm-1 control-label">y类型</label>

            <div class="col-sm-2">
                <select id="z-e-yaxis-type" class="form-control">
                    <option value="value" selected>数值</option>
                    <option value="category">类目</option>
                    <option value="time">时间</option>
                    <option value="log">对数</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-5">
                <select name="from" id="z-e-selectable-fields" class="form-control" size="13"
                        multiple="multiple">
                </select>
            </div>

            <div class="col-sm-2">
                <button type="button" id="z-e-fields-move-to-up"
                        class="btn btn-default btn-block">
                    <i class="glyphicon glyphicon-chevron-up"></i>
                </button>
                <button type="button" id="z-e-fields-all-to-right"
                        class="btn btn-default btn-block">
                    <i class="glyphicon glyphicon-forward"></i>
                </button>
                <button type="button" id="z-e-fields-to-right"
                        class="btn btn-default btn-block">
                    <i class="glyphicon glyphicon-chevron-right"></i>
                </button>
                <button type="button" id="z-e-fields-to-left"
                        class="btn btn-default btn-block">
                    <i class="glyphicon glyphicon-chevron-left"></i>
                </button>
                <button type="button" id="z-e-fields-all-to-left"
                        class="btn btn-default btn-block">
                    <i class="glyphicon glyphicon-backward"></i>
                </button>
                <button type="button" id="z-e-fields-move-to-down"
                        class="btn btn-default btn-block">
                    <i class="glyphicon glyphicon-chevron-down"></i>
                </button>
            </div>

            <div class="col-sm-5">
                <select name="to" id="z-e-selected-fields" class="form-control"
                        size="13" multiple="multiple"></select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <table id="z-e-series" class="table table-bordered">
                    <tr>
                        <td>#
                        <td>名称
                        <td>类型
                        <td>字段及顺序
                        <td>x轴
                        <td>y轴
                        <td>操作
                    </tr>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-12">
                    <button type="button" id="z-e-add-serie" class="btn btn-success">增加系列</button>
                    <button type="button" id="z-e-refresh-graphic" class="btn btn-success">刷新图表</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div id="z-e-graphic-container" class="col-sm-12">
            <div id="z-e-graphic-body" class="z-e-main"></div>
        </div>
    </div>
</div>
<script language="javascript">
        #if ($ZeppelinEChartsOriginJsonData)
        var orginData$ZeppelinEChartsParagraphId = $ZeppelinEChartsOriginJsonData;
        #else
        var orginData$ZeppelinEChartsParagraphId = [];
        #end
    var graphicBody$ZeppelinEChartsParagraphId = null;
    var graphicBodyObj$ZeppelinEChartsParagraphId = null;
    var serieConfigs$ZeppelinEChartsParagraphId = new Array();
        #foreach($serie in $ZeppelinEchartsSerieList)
        serieConfigs$ZeppelinEChartsParagraphId.push($serie.toString());
        #end
    option$ZeppelinEChartsParagraphId = {
        title: {
            text: "",
            subtext: "",
        },
        tooltip: {
            trigger: "item"
        },
        legend: {
            right: 10,
            data: []
        },
        xAxis: [
            #foreach($xAxisIndex in [1..$ZeppelinECahrtsXAxisCount])
                {
                    splitLine: {
                        #if($xAxisIndex == 1)
                            show: true,
                            lineStyle: {
                                type: 'dashed'
                            }
                        #else
                            show: false
                        #end},
                    type: 'category'
                },
            #end],
        yAxis: [
            #foreach($yAxisIndex in [1..$ZeppelinECahrtsYAxisCount])
                {
                    splitLine: {
                        #if($yAxisIndex == 1)
                            lineStyle: {
                                type: 'dashed'
                            }
                        #else
                            show: false
                        #end},
                    scale: true,
                    type: 'value'
                },
            #end],
        series: [
            #foreach($seriesIndex in [1..$ZeppelinEchartsSeriesCount])
                {
                    name: "$seriesIndex",
                    type: "line",
                    data: []
                },
            #end]
    };

    function fillXY(option, paragraphId) {
        if (option.xAxis && option.xAxis.length > 0) {
            for (var i = 0; i < option.xAxis.length; i++) {
                $("#" + paragraphId + " #z-e-xaxis").append("<option value='" + i + "' " + (i == 0 ? "selected" : "") + ">" + i + "-" +
                        (option.xAxis[i]
                                .type ? option.xAxis[i].type : "category") + "</option>");
            }
            $("#" + paragraphId + " #z-e-xaxis-type option[value='" + (option.xAxis[0].type ? option.xAxis[0].type : "category") + "']").attr('selected', true);
            $("#" + paragraphId + " #z-e-xaxis").change(function () {
                $("#" + paragraphId + " #z-e-xaxis-type option:selected").attr("selected", false);
                var i = parseInt($(this).val());
                $("#" + paragraphId + " #z-e-xaxis-type option[value='" + (option.xAxis[i].type ? option.xAxis[i].type : "category") + "']").attr('selected', true);
            });
            $("#" + paragraphId + " #z-e-xaxis-type").change(function () {
                var type = $("#" + paragraphId + " #z-e-xaxis-type option:selected").val();
                var index = $("#" + paragraphId + " #z-e-xaxis option:selected").val();
                $("#" + paragraphId + " #z-e-xaxis option:selected").text(index + "-" + type);
                option.xAxis[index].type = type;
            });
        }
        if (option.yAxis && option.yAxis.length > 0) {
            for (var i = 0; i < option.yAxis.length; i++) {
                $("#" + paragraphId + " #z-e-yaxis").append("<option value='" + i + "' " + (i == 0 ? "selected" : "") + ">" + i + "-" + (option.yAxis[i].type ? option.yAxis[i].type : "value") + "</option>");
            }
            $("#" + paragraphId + " #z-e-yaxis-type option[value='" + (option.yAxis[0].type ? option.yAxis[0].type : "value") + "']").attr("selected", true);
            $("#" + paragraphId + " #z-e-yaxis").change(function () {
                $("#" + paragraphId + " #z-e-yaxis-type option:selected").attr("selected", false);
                var i = parseInt($(this).val());
                $("#" + paragraphId + " #z-e-yaxis-type option[value='" + (option.yAxis[i].type ? option.yAxis[i].type : "value") + "']").attr('selected', true);
            });
            $("#" + paragraphId + " #z-e-yaxis-type").change(function () {
                var type = $("#" + paragraphId + " #z-e-yaxis-type option:selected").val();
                var index = $("#" + paragraphId + " #z-e-yaxis option:selected").val();
                $("#" + paragraphId + " #z-e-yaxis option:selected").text(index + "-" + type);
                option.yAxis[index].type = type;
            });
        }
    }

    function fillOriginDataOptionsFromStruct(data, paragraphId) {
        $("#" + paragraphId + " #z-e-selected-fields option").remove();
        $("#" + paragraphId + " #z-e-selectable-fields option").remove();
        for (var key in data) {
            $("#" + paragraphId + " #z-e-selectable-fields").append("<option value='" + key + "'>" + key + "</option>");
        }
    }

    function buildLegendDataByOption(option, paragraphId) {
        var legendData = new Array();
        var addedName = false;
        for (var serieIndex = 0; serieIndex < option.series.length; serieIndex++) {
            addedName = false;
            try {
                var data = option.series[serieIndex].data;
                for (var i = 0; i < data.length; i++) {
                    if (data[i].name) {
                        legendData.push(data[i].name);
                        addedName = true;
                    }
                }
            } catch (e) {}
            if (!addedName) {
                legendData.push(option.series[serieIndex].name);
            }
        }
        return legendData;
    }

    function buildSerieDataByOrigin(originData, serieConfigs, paragraphId) {
        var seriesData = new Array();
        for (var dataIndex = 0; dataIndex < originData.length; dataIndex++) {
            var data = originData[dataIndex];
            for (var serieConfigIndex = 0; serieConfigIndex < serieConfigs.length; serieConfigIndex++) {
                var serieConfig = serieConfigs[serieConfigIndex];
                var serie = undefined;
                if (seriesData.length < serieConfig.index + 1) {
                    seriesData.push({
                        "name": serieConfig.name,
                        "type": serieConfig.type,
                        "xAxisIndex": serieConfig.xAxisIndex,
                        "yAxisIndex": serieConfig.yAxisIndex,
                        "data": new Array()
                    });
                }
                serie = seriesData[serieConfig.index];
                if (serieConfig.type == "line" || serieConfig.type == "bar" || serieConfig.type == "scatter") {
                    if (serieConfig.fields.indexOf(",") == -1) {
                        serie.data.push(data[serieConfig.fields]);
                        continue;
                    }
                    var objData = new Array();
                    var fieldArray = serieConfig.fields.split(",");
                    for (var i = 0; i < fieldArray.length; i++) {
                        objData.push(data[fieldArray[i]]);
                    }
                    serie.data.push(objData);
                } else if (serieConfig.type == "pie") {
                    var fieldArray = serieConfig.fields.split(",");
                    if (fieldArray.length == 1) {
                        serie.data.push(data[serieConfig.fields]);
                        continue;
                    }
                    serie.data.push({name:data[fieldArray[0]], value:data[fieldArray[1]]});
                } else if (serieConfig.type == 'radar') {
                    var fieldArray = serieConfig.fields.split(",");
                    for (var i = 0; i < fieldArray.length; i++) {
                        var vector = serie.data[i];
                        if (vector == undefined) {
                            vector = {name:fieldArray[i], value: new Array()};
                            serie.data.push(vector);
                        }
                        vector.value.push(data[fieldArray[i]]);
                    }
                }
            }
        }
        return seriesData;
    }

    function setRadarIndicator(option, paragraphId) {
        //将每个系列中data[0]作为该系统的indicator
        for (var i = 0; i < option.series.length; i++) {
            if (option.series[i].type != 'radar') {
                continue;
            }
            if (option.radar == undefined) {
                option.radar = {};
            }
            if (option.radar.indicator == undefined) {
                option.radar.indicator = new Array();
            }
            var indicatorList = option.series[i].data[0].value;
            option.series[i].data.del(0);
            var indicator = new Array();
            for (var j = 0; j < indicatorList.length; j++) {
                var data = option.series[i].data;
                var max = 0;
                for (var k = 0; k < data.length; k++) {
                    if (data[k].value[j] > max) {
                        max = data[k].value[j];
                    }
                }
                option.radar.indicator.push({"name": "" + indicatorList[j], "max": max});
            }
        }
    }
    function checkOption(option, paragraphId) {
        var hasRadar = false;
        var needAxis = false;
        var pieSeries = 0;
        for (var i = 0; i < option.series.length; i++) {
            if (option.series[i].type == "radar") {
                hasRadar = true;
                continue;
            }
            if (option.series[i].type == "line") {
                needAxis = true;
                continue;
            }
            if (option.series[i].type == "bar") {
                needAxis = true;
                continue;
            }
            if (option.series[i].type == "scatter") {
                needAxis = true;
                continue;
            }
            if (option.series[i].type == "pie") {
                pieSeries = pieSeries + 1;
            }
        }
        if (pieSeries > 1) {
            var width = 100/(pieSeries * 2 - 1);
            var startSize = 0;
            for (var i = 0; i < option.series.length; i++) {
                if (option.series[i].type != "pie") {
                    continue;
                }
                option.series[i].radius = [startSize + "%", (startSize + width) + "%"];
                startSize = startSize + width * 2;
            }
        }
        if (!hasRadar && option.radar != undefined) {
            option.radar = undefined;
        }
        if (!needAxis) {
            if (option.xAxis != undefined) {
                option.xAxisback = option.xAxis;
                option.xAxis = undefined;
            }
            if (option.yAxis != undefined) {
                option.yAxisback = option.yAxis;
                option.yAxis = undefined;
            }
        } else {
            if (option.xAxisback != undefined) {
                option.xAxis = option.xAxisback;
                option.xAxisback = undefined;
            }
            if (option.yAxisback != undefined) {
                option.yAxis = option.yAxisback;
                option.yAxisback = undefined;
            }
        }
    }

    function buildGraphicOption(option, paragraphId) {
        var title = $("#" + paragraphId + " #z-e-title").val();
        var subtitle = $("#" + paragraphId + " #z-e-subtitle").val();
        option.title.text = title;
        option.title.subtext = subtitle;
        option.series = buildSerieDataByOrigin(orginData);
        option.legend.data = buildLegendDataByOption(option);
        setRadarIndicator(option);
        checkOption(option);
        return option;
    }

    Array.prototype.del = function (index) {
        if (isNaN(index) || index >= this.length) {
            return false;
        }
        for (var i = 0, n = 0; i < this.length; i++) {
            if (this[i] != this[index]) {
                this[n++] = this[i];
            }
        }
        this.length -= 1;
    };

    function updateZeppelinEChartsSeries(paragraphId) {
        $("#" + paragraphId + " #z-e-series tr:gt(0)").remove();
        for (var index = 0; index < serieConfigs.length; index++) {
            var cfg = serieConfigs[index];
            $("#" + paragraphId + " #z-e-series").append(
                    "<tr><td>" + index
                    + "<td>" + cfg.name
                    + "<td>" + cfg.type
                    + "<td>" + cfg.fields
                    + "<td>" + cfg.xAxisIndex
                    + "<td>" + cfg.yAxisIndex
                    + "<td><button name=\"z-e-serie-edit\" type=\"button\" class=\"btn btn-default\">修改</button>&nbsp;&nbsp;"
                    + "<button name=\"z-e-serie-update\" type=\"button\" class=\"btn btn-primary\">更新</button>&nbsp;&nbsp;"
                    + "<button name=\"z-e-serie-delete\" type=\"button\" class=\"btn btn-danger\">删除</button>"
                    + "</tr>");
        }
        $("#" + paragraphId + " button[name='z-e-serie-delete']").each(function () {
            $(this).click(function () {
                var serieIndex = parseInt($(this).parents("tr").children("td:eq(0)").html());
                serieConfigs.del(serieIndex);
                $(this).parents("tr").remove();
                updateZeppelinEChartsSeries();
            });

        });
        $("#" + paragraphId + " button[name='z-e-serie-edit']").each(function () {
            $(this).click(function () {
                var serieIndex = parseInt($(this).parents("tr").children("td:eq(0)").html());
                $("#" + paragraphId + " #z-e-type option[value='" + serieConfigs[serieIndex].type + "']").attr('selected', true);
                $("#" + paragraphId + " #z-e-serie-name").val(serieConfigs[serieIndex].name);
                $("#" + paragraphId + " #z-e-xaxis option[value='" + serieConfigs[serieIndex].xAxisIndex + "']").attr('selected', true);
                $("#" + paragraphId + " #z-e-yaxis option[value='" + serieConfigs[serieIndex].yAxisIndex + "']").attr('selected', true);
                fillOriginDataOptionsFromStruct(orginData[0]);
                var fieldArray = serieConfigs[serieIndex].fields.split(",");
                for (var i = 0; i < fieldArray.length; i++) {
                    if (fieldArray[i] == "") {
                        break;
                    }
                    $("#" + paragraphId + " #z-e-selected-fields").append("<option value='" + fieldArray[i] + "'>" + fieldArray[i] + "</option>");
                    $("#" + paragraphId + " #z-e-selectable-fields option[value='" + fieldArray[i] + "']").remove();
                }
            });
        });
        $("#" + paragraphId + " button[name='z-e-serie-update']").each(function () {
            $(this).click(function () {
                var serieIndex = parseInt($(this).parents("tr").children("td:eq(0)").html());
                var selected = $("#" + paragraphId + " #z-e-selected-fields option");
                var fields = "";
                for (var i = 0; i < selected.length; i++) {
                    if (i > 0) {
                        fields += ",";
                    }
                    fields += selected[i].value;
                }
                serieConfigs[serieIndex] = {
                    "index": serieIndex,
                    "name": $("#" + paragraphId + " #z-e-serie-name").val(),
                    "type": $("#" + paragraphId + " #z-e-type").val(),
                    "fields": fields,
                    "xAxisIndex": $("#" + paragraphId + " #z-e-xaxis").val(),
                    "yAxisIndex": $("#" + paragraphId + " #z-e-yaxis").val()
                };
                fillOriginDataOptionsFromStruct(orginData[0]);
                updateZeppelinEChartsSeries();
            });
        });
    }
    $("#$ZeppelinEChartsParagraphId #z-e-fields-to-right").click(function () {
        var selected = $("#z-e-selectable-fields").val();
        for (var i = 0; i < selected.length; i++) {
            $("#z-e-selected-fields").append("<option value='" + selected[i] + "'>" + selected[i] + "</option>");
        }
        for (var i = 0; i < selected.length; i++) {
            $("#z-e-selectable-fields option[value='" + selected[i] + "']").remove();
        }
    });
    $("#$ZeppelinEChartsParagraphId #z-e-fields-to-left").click(function () {
        var selected = $("#z-e-selected-fields").val();
        for (var i = 0; i < selected.length; i++) {
            $("#z-e-selectable-fields").append("<option value='" + selected[i] + "'>" + selected[i] + "</option>");
        }
        for (var i = 0; i < selected.length; i++) {
            $("#z-e-selected-fields option[value='" + selected[i] + "']").remove();
        }
    });
    $("#$ZeppelinEChartsParagraphId #z-e-fields-all-to-right").click(function () {
        var selected = $("#z-e-selectable-fields option");
        for (var i = 0; i < selected.length; i++) {
            $("#z-e-selected-fields").append("<option value='" + selected[i].value + "'>" + selected[i].text + "</option>");
        }
        $("#z-e-selectable-fields option").remove();
    });
    $("#$ZeppelinEChartsParagraphId #z-e-fields-all-to-left").click(function () {
        var selected = $("#z-e-selected-fields option");
        for (var i = 0; i < selected.length; i++) {
            $("#z-e-selectable-fields").append("<option value='" + selected[i].value + "'>" + selected[i].text + "</option>");
        }
        $("#z-e-selected-fields option").remove();
    });
    $("#$ZeppelinEChartsParagraphId #z-e-refresh-graphic").click(function () {
        var width = $("#z-e-graphic-width").val();
        if (width != undefined && width != "") {
            $("#z-e-graphic-body").css("width", width);
        }
        var height = $("#z-e-graphic-height").val();
        if (height != undefined && width != "") {
            $("#z-e-graphic-body").css("height", height);
        }
        drawChart(false, graphicBodyObj, buildGraphicOption(option));
    });

    $("#$ZeppelinEChartsParagraphId #z-e-add-serie").click(function () {
        var selected = $("#z-e-selected-fields option");
        var fields = "";
        for (var i = 0; i < selected.length; i++) {
            if (i > 0) {
                fields += ",";
            }
            fields += selected[i].value;
        }
        serieConfigs.push({
            "index": serieConfigs.length,
            "name": $("#z-e-serie-name").val(),
            "type": $("#z-e-type").val(),
            "fields": fields,
            "xAxisIndex": $("#z-e-xaxis").val(),
            "yAxisIndex": $("#z-e-yaxis").val()
        });
        fillOriginDataOptionsFromStruct(orginData[0]);
        updateZeppelinEChartsSeries();
    });

        #if ($ZeppelinEchartsOptionSettings && $ZeppelinEchartsOptionSettings.size() > 0)
        try {
            #foreach($entry in $ZeppelinEchartsOptionSettings.entrySet())
                option.$entry.key = $entry.value;
            #end
        } catch (e) {
            console.error("option settings error");
        }
        #end

    function drawChart(redraw, chart, option) {
        if (redraw) {
            if (chart && chart.dispose) {
                chart.dispose();
            }
            chart = echarts.init(chart, "macarons");
        }
        chart.showLoading({text: "正在重新绘制图表,请稍候..."});
        try {
            chart.setOption(option, true);
            chart.hideLoading();
        } catch (e) {
            chart.showLoading({text: "绘制图表出错了"});
            console.log(e);
        }
        return chart;
    }

    function getJS(url) {
        return new Promise(function (resolve, reject) {
            var script = document.createElement('script');
            script.type = "text/javascript";

            if (script.readyState) {
                script.onreadystatechange = function () {
                    if (script.readyState == "loaded" ||
                            script.readyState == "complete") {
                        script.onreadystatechange = null;
                        resolve('success: ' + url);
                    }
                };
            } else {
                script.onload = function () {
                    resolve('success: ' + url);
                };
            }

            script.onerror = function () {
                reject(Error(url + 'load error!'));
            };

            script.src = url;
            document.body.appendChild(script);

        });
    }

    function getCSS(url) {
        return new Promise(function (resolve, reject) {
            var css = document.createElement('link');
            css.rel = "stylesheet";

            if (css.readyState) {
                css.onreadystatechange = function () {
                    if (css.readyState == "loaded" ||
                            css.readyState == "complete") {
                        css.onreadystatechange = null;
                        resolve('success: ' + url);
                    }
                };
            } else {
                css.onload = function () {
                    resolve('success: ' + url);
                };
            }

            css.onerror = function () {
                reject(Error(url + 'load error!'));
            };

            css.href = url;
            document.body.appendChild(css);

        });
    }

    function spawn(generatorFunc) {
        function continuer(verb, arg) {
            var result;
            try {
                result = generator[verb](arg);
            } catch (err) {
                return Promise.reject(err);
            }
            if (result.done) {
                return result.value;
            } else {
                return Promise.resolve(result.value).then(onFulfilled, onRejected);
            }
        }

        var generator = generatorFunc();
        var onFulfilled = continuer.bind(continuer, "next");
        var onRejected = continuer.bind(continuer, "throw");
        return onFulfilled();
    }

    var jquery = '$ZeppelinEChartsJQueryUrl',
            echarts = '$ZeppelinEChartsJSUrl',
            bootstrap = '$ZeppelinEChartsBootstrapURL',
            zeppelinEchartsJS = '/plugins/zeppelin-echarts/js/zeppelin-echarts.js',
            zeppelinEchartsCSS = '/plugins/zeppelin-echarts/css/zeppelin-echarts.css'
            ;

    spawn(function * ()
    {
        try {
            yield getJS(jquery);
            console.log('jquery has loaded');
            yield getJS(echarts);
            console.log('echarts has loaded');
            yield getJS(bootstrap);
            console.log('bootstrap has loaded');
            yield getJS(zeppelinEchartsJS);
            console.log('zeppelinEchartsJS has loaded');
            yield getCSS(zeppelinEchartsCSS);
            console.log('zeppelinEchartsCSS has loaded');
            $(document).ready(function () {
                #if($ZeppelinEChartsAdminConsole == false)
                    $("#$ZeppelinEChartsParagraphId #z-e-console").hide();
                #elseif ($ZeppelinEChartsUserConsole == false)
                    if (location.href.endsWith("?asIframe")) {
                        $("#$ZeppelinEChartsParagraphId #z-e-console").hide();
                    }
                #end
                #if($ZeppelinECahrtsWidth) $("#$ZeppelinEChartsParagraphId #z-e-graphic-body").css("width", "$ZeppelinECahrtsWidth"); #end
                #if($ZeppelinECahrtsHeight) $("#$ZeppelinEChartsParagraphId #z-e-graphic-body").css("height", "$ZeppelinECahrtsHeight"); #end
                $("#$ZeppelinEChartsParagraphId #z-e-title").val(option$ZeppelinEChartsParagraphId.title.text);
                $("#$ZeppelinEChartsParagraphId #z-e-subtitle").val(option$ZeppelinEChartsParagraphId.title.subtext);
                fillXY(option$ZeppelinEChartsParagraphId);
                fillOriginDataOptionsFromStruct(orginData[0]);
                updateZeppelinEChartsSeries();
                graphicBody = document.getElementById('z-e-graphic-body');
                graphicBodyObj = echarts.init(graphicBody, "macarons");
                $(window).resize(function () {
                    graphicBodyObj.resize();
                });
                drawChart(false, graphicBodyObj, buildGraphicOption(option));
            });
        } catch (err) {
            console.log(err);
        }
    }
    )
    ;
</script>
#if ($ZeppelinEChartsBodyFoot)
    $ZeppelinEChartsBodyFoot
#end