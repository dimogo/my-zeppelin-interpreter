<div class="container-fluid zeppelin-echarts-example">
    <form class="form-horizontal" role="form">
        <div class="form-group row">
            <label for="inputEmail3" class="col-sm-1 control-label">主标题</label>

            <div class="col-sm-5">
            <input type="text" class="form-control" id="zeppelin-echarts-title" placeholder="图表的主标题"
                #if ($ZeppelinEchartsTitle) value=$ZeppelinEchartsTitile" #else value="" #end >
            </div>
            <label for="inputEmail3" class="col-sm-1 control-label">副标题</label>

            <div class="col-sm-5">
                <input type="text" class="form-control" id="zeppelin-echarts-subtitle" placeholder="图表的副标题"
                #if ($ZeppelinEchartsSubTitle) "$ZeppelinEchartsSubTitle" #else "" #end >
            </div>
        </div>
        <div class="form-group row">
            <label for="inputEmail3" class="col-sm-1 control-label">图表</label>

            <div class="col-sm-2">
                <select id="zeppelin-echarts-type" class="form-control">
                    <option value=""></option>
                    <option value="bar">柱状图</option>
                    <option value="line">折线图</option>
                    <option value="scatter">散点图</option>
                </select>
            </div>
            <label for="inputEmail3" class="col-sm-2 control-label">系列名称</label>

            <div class="col-sm-2">
                <input type="text" class="form-control" id="zeppelin-echarts-serie-name" placeholder="图表系列名称">
            </div>
        </div>
        <div class="form-group row">
            <label for="inputEmail3" class="col-sm-1 control-label">宽度</label>

            <div class="col-sm-2">
                <input type="text" class="form-control" id="inputEmail3" placeholder="图表的宽度">
            </div>
            <label for="inputEmail3" class="col-sm-2 control-label">x轴</label>

            <div class="col-sm-2">
                <select id="zeppelin-echarts-xaxis" class="form-control">
                    <option value="0" selected>0</option>
                </select>
            </div>
            <label for="inputEmail3" class="col-sm-2 control-label">x轴值类型</label>

            <div class="col-sm-2">
                <select id="zeppelin-echarts-xaxis-type" class="form-control">
                    <option value="value">数值</option>
                    <option value="category" selected>类目</option>
                    <option value="time">时间</option>
                    <option value="log">对数</option>
                </select>
            </div>
        </div>
        <div class="form-group row">
            <label for="inputEmail3" class="col-sm-1 control-label">高度</label>

            <div class="col-sm-2">
                <input type="text" class="form-control" id="inputEmail3" placeholder="图表的高度">
            </div>
            <label for="inputEmail3" class="col-sm-2 control-label">y轴</label>

            <div class="col-sm-2">
                <select id="zeppelin-echarts-yaxis" class="form-control">
                    <option value="0" selected>0</option>
                </select>
            </div>
            <label for="inputEmail3" class="col-sm-2 control-label">y轴值类型</label>

            <div class="col-sm-2">
                <select id="zeppelin-echarts-yaxis-type" class="form-control">
                    <option value="value" selected>数值</option>
                    <option value="category">类目</option>
                    <option value="time">时间</option>
                    <option value="log">对数</option>
                </select>
            </div>
        </div>
</div>
<div class="row">
    <div class="col-sm-5">
        <select name="from" id="zeppelin-echarts-selectable-fields" class="form-control" size="13"
                multiple="multiple">
        </select>
    </div>

    <div class="col-sm-2">
        <button type="button" id="zeppelin-echarts-fields-move-to-up"
                class="btn btn-default btn-block">
            <i class="glyphicon glyphicon-chevron-up"></i>
        </button>
        <button type="button" id="zeppelin-echarts-fields-all-to-right"
                class="btn btn-default btn-block">
            <i class="glyphicon glyphicon-forward"></i>
        </button>
        <button type="button" id="zeppelin-echarts-fields-to-right"
                class="btn btn-default btn-block">
            <i class="glyphicon glyphicon-chevron-right"></i>
        </button>
        <button type="button" id="zeppelin-echarts-fields-to-left"
                class="btn btn-default btn-block">
            <i class="glyphicon glyphicon-chevron-left"></i>
        </button>
        <button type="button" id="zeppelin-echarts-fields-all-to-left"
                class="btn btn-default btn-block">
            <i class="glyphicon glyphicon-backward"></i>
        </button>
        <button type="button" id="zeppelin-echarts-fields-move-to-down"
                class="btn btn-default btn-block">
            <i class="glyphicon glyphicon-chevron-down"></i>
        </button>
    </div>

    <div class="col-sm-5">
        <select name="to" id="zeppelin-echarts-selected-fields" class="form-control"
                size="13" multiple="multiple"></select>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <table id="zeppelin-echarts-series" class="table table-bordered">
            <tr>
                <td>#
                <td>名称
                <td>类型
                <td>字段及顺序
                <td>x轴
                <td>y轴
                <td>
            </tr>
        </table>
    </div>
</div>
<div class="row">
    <div class="form-group">
        <div class="col-sm-offset-2 col-sm-12">
            <button type="button" id="zeppin-echarts-add-serie" class="btn btn-success">增加系列</button>
            <button type="button" id="zeppin-echarts-refresh-graphic" class="btn btn-success">刷新图表</button>
        </div>
    </div>
    </form>
</div>
<div class="row">
    <div id="zeppelin-echarts-graphic-container" class="col-sm-12">
        <div id="zeppelin-echarts-graphic-body" class="zeppelin-echarts-main"></div>
    </div>
</div>
</div>
<script language="javascript">
        #if ($ZeppelinEChartsOriginJsonData)
        var orginData = $ZeppelinEChartsOriginJsonData;
        #else
        var orginData = [];
        #end
    var graphicBody = null;
    var graphicBodyObj = null;
    var serieConfigs = new Array();
        #foreach($serie in $ZeppelinEchartsSerieList)
        serieConfigs.push($serie.toString());
        #end
    option = {
        title: {
            text: "",
            subtext: "",
        },
        legend: {
            right: 10,
            data: []
        },
        xAxis: [
            #foreach($xAxisIndex in [1..$ZeppelinECahrtsXAxisCount])
                {
                    #if($xAxisIndex == 0)
                        splitLine: {
                            lineStyle: {
                                type: 'dashed'
                            }
                        },
                    #end
                    type: 'category'
                },
            #end],
        yAxis: [
            #foreach($yAxisIndex in [1..$ZeppelinECahrtsYAxisCount])
                {
                    #if($yAxisIndex == 0)
                    splitLine: {
                        lineStyle: {
                            type: 'dashed'
                        }
                    },
                    #end
                    scale: true,
                    type: 'value'
                },
            #end],
        series: [
            #foreach($seriesIndex in [1..$ZeppelinEchartsSeriesCount])
                {
                    name: "$seriesIndex",
                    type: "line",
                    data: []
                }
            #end]
    };

    function fillOriginDataOptionsFromStruct(data) {
        for (var key in data) {
            $("#zeppelin-echarts-selectable-fields").append("<option value='" + key + "'>" + key + "</option>");
        }
    }

    function buildLegendDataBySerieConfigs() {
        var legendData = new Array();
        for (var serieConfigIndex = 0; serieConfigIndex < serieConfigs.length; serieConfigIndex++) {
            legendData.push(serieConfigs[serieConfigIndex].name);
        }
        return legendData;
    }

    function buildSerieDataByOrigin(originData) {
        var seriesData = new Array();
        for (var dataIndex = 0; dataIndex < originData.length; dataIndex++) {
            var data = originData[dataIndex];
            for (var serieConfigIndex = 0; serieConfigIndex < serieConfigs.length; serieConfigIndex++) {
                var serieConfig = serieConfigs[serieConfigIndex]
                var serie = undefined;
                if (seriesData.length < serieConfig.index + 1) {
                    seriesData.push({
                        "name": serieConfig.name,
                        "type": serieConfig.type,
                        "xAxisIndex": serieConfig.xAxisIndex,
                        "yAxisIndex": serieConfig.yAxisIndex,
                        "data": new Array()
                    });
                }
                serie = seriesData[serieConfig.index];
                if (serieConfig.fields.indexOf(",") == -1) {
                    serie.data.push(data[serieConfig.fields]);
                    continue;
                }
                var objData = new Array();
                var fieldArray = serieConfig.fields.split(",");
                for (var i = 0; i < fieldArray.length; i++) {
                    objData.push(data[fieldArray[i]]);
                }
                serie.data.push(objData);
            }
        }
        return seriesData;
    }

    function buildGraphicOption(option) {
        var title = $("#zeppelin-echarts-title").val();
        var subtitle = $("#zeppelin-echarts-subtitle").val();
        option.title.text = title;
        option.title.subtext = subtitle;
        //option.xAxis.type = $("#zeppelin-echarts-xaxis-type").val();
        //option.yAxis.type = $("#zeppelin-echarts-yaxis-type").val();
        option.series = buildSerieDataByOrigin(orginData);
        option.legend.data = buildLegendDataBySerieConfigs(serieConfigs);
        return option;
    }

    Array.prototype.del = function (index) {
        if (isNaN(index) || index >= this.length) {
            return false;
        }
        for (var i = 0, n = 0; i < this.length; i++) {
            if (this[i] != this[index]) {
                this[n++] = this[i];
            }
        }
        this.length -= 1;
    };

    function updateZeppelinEChartsSeries() {
        $("#zeppelin-echarts-series tr:gt(0)").remove();
        for (var index = 0; index < serieConfigs.length; index++) {
            var cfg = serieConfigs[index];
            $("#zeppelin-echarts-series").append(
                    "<tr><td>" + index
                    + "<td>" + cfg.name
                    + "<td>" + cfg.type
                    + "<td>" + cfg.fields
                    + "<td>" + cfg.xAxisIndex
                    + "<td>" + cfg.yAxisIndex
                    + "<td><button name=\"zeppelin-echarts-serie-delete\" type=\"button\" class=\"btn btn-danger\">删除</button>"
                    + "</tr>");
        }
        $("button[name='zeppelin-echarts-serie-delete']").each(function () {
            $(this).click(function () {
                var serieIndex = parseInt($(this).parents("tr").children("td:eq(0)").html())
                serieConfigs.del(serieIndex)
                $(this).parents("tr").remove()
                updateZeppelinEChartsSeries()
            })
        })
    }
    $("#zeppelin-echarts-fields-to-right").click(function () {
        var selected = $("#zeppelin-echarts-selectable-fields").val();
        for (var i = 0; i < selected.length; i++) {
            $("#zeppelin-echarts-selected-fields").append("<option value='" + selected[i] + "'>" + selected[i] + "</option>");
        }
        for (var i = 0; i < selected.length; i++) {
            $("#zeppelin-echarts-selectable-fields option[value='" + selected[i] + "']").remove();
        }
    });
    $("#zeppelin-echarts-fields-to-left").click(function () {
        var selected = $("#zeppelin-echarts-selected-fields").val();
        for (var i = 0; i < selected.length; i++) {
            $("#zeppelin-echarts-selectable-fields").append("<option value='" + selected[i] + "'>" + selected[i] + "</option>");
        }
        for (var i = 0; i < selected.length; i++) {
            $("#zeppelin-echarts-selected-fields option[value='" + selected[i] + "']").remove();
        }
    });
    $("#zeppelin-echarts-fields-all-to-right").click(function () {
        var selected = $("#zeppelin-echarts-selectable-fields option");
        for (var i = 0; i < selected.length; i++) {
            $("#zeppelin-echarts-selected-fields").append("<option value='" + selected[i].value + "'>" + selected[i].text + "</option>");
        }
        $("#zeppelin-echarts-selectable-fields option").remove();
    });
    $("#zeppelin-echarts-fields-all-to-left").click(function () {
        var selected = $("#zeppelin-echarts-selected-fields option");
        for (var i = 0; i < selected.length; i++) {
            $("#zeppelin-echarts-selectable-fields").append("<option value='" + selected[i].value + "'>" + selected[i].text + "</option>");
        }
        $("#zeppelin-echarts-selected-fields option").remove();
    });
    $("#zeppin-echarts-refresh-graphic").click(function () {
        drawChart(false, graphicBodyObj, buildGraphicOption(option));
    });

    $("#zeppin-echarts-add-serie").click(function () {
        var selected = $("#zeppelin-echarts-selected-fields option");
        var fields = "";
        for (var i = 0; i < selected.length; i++) {
            if (i > 0) {
                fields += ","
            }
            fields += fields[selected[i].value]
        }
        serieConfigs.push({
            "index": serieConfigs.length,
            "name": $("#zeppelin-echarts-serie-name").val(),
            "type": $("#zeppelin-echarts-type").val(),
            "fields": fields,
            "xAxisIndex": $("#zeppelin-echarts-xaxis").val(),
            "yAxisIndex": $("#zeppelin-echarts-yaxis").val()
        });
        updateZeppelinEChartsSeries();
    });

        #if ($ZeppelinEchartsOptionSettings && $ZeppelinEchartsOptionSettings.size() > 0)
        try {
            #foreach($entry in $ZeppelinEchartsOptionSettings.entrySet())
                option.$entry.key = $entry.value
            #end
        } catch (e) {
            console.error("option settings error");
        }
        #end

    function drawChart(redraw, chart, option) {
        if (redraw) {
            if (chart && chart.dispose) {
                chart.dispose();
            }
            chart = echarts.init(chart, "macarons");
        }
        chart.showLoading({text: "正在重新绘制图表,请稍候..."})
        try {
            chart.setOption(option, true)
            chart.hideLoading();
        } catch (e) {
            chart.showLoading({text: "绘制图表出错了"});
            console.log(e);
        }
        return chart;
    }

    function getJS(url) {
        return new Promise(function (resolve, reject) {
            var script = document.createElement('script');
            script.type = "text/javascript";

            if (script.readyState) {
                script.onreadystatechange = function () {
                    if (script.readyState == "loaded" ||
                            script.readyState == "complete") {
                        script.onreadystatechange = null;
                        resolve('success: ' + url);
                    }
                };
            } else {
                script.onload = function () {
                    resolve('success: ' + url);
                };
            }

            script.onerror = function () {
                reject(Error(url + 'load error!'));
            };

            script.src = url;
            document.body.appendChild(script);

        });
    }

    function getCSS(url) {
        return new Promise(function (resolve, reject) {
            var css = document.createElement('link');
            css.rel = "stylesheet";

            if (css.readyState) {
                css.onreadystatechange = function () {
                    if (css.readyState == "loaded" ||
                            css.readyState == "complete") {
                        css.onreadystatechange = null;
                        resolve('success: ' + url);
                    }
                };
            } else {
                css.onload = function () {
                    resolve('success: ' + url);
                };
            }

            css.onerror = function () {
                reject(Error(url + 'load error!'));
            };

            css.href = url;
            document.body.appendChild(css);

        });
    }

    function spawn(generatorFunc) {
        function continuer(verb, arg) {
            var result;
            try {
                result = generator[verb](arg);
            } catch (err) {
                return Promise.reject(err);
            }
            if (result.done) {
                return result.value;
            } else {
                return Promise.resolve(result.value).then(onFulfilled, onRejected);
            }
        }

        var generator = generatorFunc();
        var onFulfilled = continuer.bind(continuer, "next");
        var onRejected = continuer.bind(continuer, "throw");
        return onFulfilled();
    }

    var jquery = '$ZeppelinEChartsJQueryUrl',
            echarts = '$ZeppelinEChartsJSUrl',
            bootstrap = '$ZeppelinEChartsBootstrapURL',
            zeppelinEchartsJS = '/plugins/zeppelin-echarts/js/zeppelin-echarts.js',
            zeppelinEchartsCSS = '/plugins/zeppelin-echarts/css/zeppelin-echarts.css'
            ;

    spawn(function * ()
    {
        try {
            yield getJS(jquery);
            console.log('jquery has loaded');
            yield getJS(echarts);
            console.log('echarts has loaded');
            yield getJS(bootstrap);
            console.log('bootstrap has loaded');
            yield getJS(zeppelinEchartsJS);
            console.log('zeppelinEchartsJS has loaded');
            yield getCSS(zeppelinEchartsCSS);
            console.log('zeppelinEchartsCSS has loaded');
            console.log('all files loaded');

            $(document).ready(function () {
                fillOriginDataOptionsFromStruct(orginData[0]);
                updateZeppelinEChartsSeries();
                graphicBody = document.getElementById('zeppelin-echarts-graphic-body');
                graphicBodyObj = echarts.init(graphicBody, "macarons");
                drawChart(false, graphicBodyObj, buildGraphicOption(option));
            });
        } catch (err) {
            console.log(err);
        }
    }
    )
    ;
</script>
#if ($ZeppelinEChartsBodyFoot)
    $ZeppelinEChartsBodyFoot
#end